<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multiplayer Board Game with Dice and Tokens</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0;
            background-color: #f0f0f0;
        }
        .board {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            grid-auto-rows: 1fr;
            gap: 5px;
            width: 100%;
            max-width: 800px;
            aspect-ratio: 2 / 1;
            margin: 20px;
        }
        .cell {
            background-color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 1px solid #333;
            position: relative;
            font-size: calc(10px + 0.5vw);
        }
        .token {
            width: 60%;
            height: 60%;
            border-radius: 50%;
            position: absolute;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: calc(8px + 0.5vw);
        }
        .danger {
            background-color: red;
        }
        .safe {
            background-color: green;
        }
        button {
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
            margin-top: 10px;
        }
        .info {
            margin: 20px;
            text-align: center;
        }
        .message-box {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            background-color: #fff;
            width: 300px;
            text-align: center;
        }
        .player-input {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>Multiplayer Board Game with Dice and Tokens</h1>
    <div class="info">
        <label for="numPlayers">Number of Players:</label>
        <input type="number" id="numPlayers" min="2" max="6" value="2">
        <button id="startGameButton">Start Game</button>
        <div id="playerNamesContainer" class="player-input"></div>
    </div>
    <div class="board" id="board"></div>
    <div class="info">
        <p id="turnInfo">Player's turn</p>
        <button id="rollDiceButton" disabled>Roll Dice</button>
        <p id="diceResult">Roll the dice to start!</p>
        <button id="restartButton" style="display: none;">Restart Game</button>
    </div>
    <div class="message-box" id="messageBox"></div>
    <script>
        const boardElement = document.getElementById('board');
        const rollDiceButton = document.getElementById('rollDiceButton');
        const diceResultElement = document.getElementById('diceResult');
        const turnInfoElement = document.getElementById('turnInfo');
        const restartButton = document.getElementById('restartButton');
        const messageBox = document.getElementById('messageBox');
        const startGameButton = document.getElementById('startGameButton');
        const numPlayersInput = document.getElementById('numPlayers');
        const playerNamesContainer = document.getElementById('playerNamesContainer');
        const boardSize = 50;
        const dangerZones = [];
        const safeZones = [];
        const playerColors = ['blue', 'yellow', 'green', 'red', 'purple', 'orange'];
        let cells = [];
        let currentPlayer = 0;
        let positions = [];
        let protection = [];
        let gameActive = false;
        let playerNames = [];

        function createBoard() {
            boardElement.innerHTML = ''; // Clear the board
            cells = [];
            for (let i = 0; i < boardSize; i++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.index = i;
                cell.textContent = i + 1; // Label cells from 1 to 50
                boardElement.appendChild(cell);
                cells.push(cell);
            }
            assignZones();
            updateBoard();
        }

        function assignZones() {
            dangerZones.length = 0; // Clear previous zones
            safeZones.length = 0; // Clear previous zones
            while (dangerZones.length < 10) {
                let randomIndex = Math.floor(Math.random() * boardSize);
                if (!dangerZones.includes(randomIndex) && randomIndex !== 0 && randomIndex !== boardSize - 1) {
                    dangerZones.push(randomIndex);
                    cells[randomIndex].classList.add('danger');
                }
            }
            while (safeZones.length < 5) {
                let randomIndex = Math.floor(Math.random() * boardSize);
                if (!safeZones.includes(randomIndex) && !dangerZones.includes(randomIndex) && randomIndex !== 0 && randomIndex !== boardSize - 1) {
                    safeZones.push(randomIndex);
                    cells[randomIndex].classList.add('safe');
                }
            }
        }

        function rollDice() {
            return Math.floor(Math.random() * 6) + 1;
        }

        function movePlayer(player, steps) {
            let currentPos = positions[player];
            let newPos = currentPos + steps;

            if (newPos > boardSize - 1) {
                setMessage(`Not sufficient move for ${playerNames[player]}!`);
                return;
            }

            if (newPos === boardSize - 1) {
                setMessage(`${playerNames[player]} wins!`);
                positions[player] = boardSize - 1;
                gameActive = false;
                rollDiceButton.disabled = true; // Disable the roll dice button
                rollDiceButton.style.display = 'none'; // Hide the roll dice button
                restartButton.style.display = 'inline-block'; // Show the restart button
                updateBoard();
                return;
            }

            positions[player] = newPos;
            handleZoneEffect(player);
            updateBoard();
        }

        function handleZoneEffect(player) {
            let pos = positions[player];
            if (dangerZones.includes(pos) && !protection[player]) {
                let setback = Math.floor(Math.random() * 6) + 1;
                setMessage(`${playerNames[player]} hit a danger zone! Moving back ${setback} steps.`);
                positions[player] = Math.max(0, positions[player] - setback);
            } else if (safeZones.includes(pos)) {
                setMessage(`${playerNames[player]} hit a safe zone! Protection granted.`);
                protection[player] = true;
            }
        }

        function setMessage(message) {
            messageBox.textContent = message;
        }

        function updateBoard() {
            cells.forEach(cell => {
                cell.innerHTML = cell.dataset.index;
            });
            positions.forEach((position, index) => {
                const playerToken = document.createElement('div');
                playerToken.classList.add('token');
                playerToken.style.backgroundColor = playerColors[index];
                playerToken.textContent = playerNames[index].charAt(0); // Display the first letter of the player's name
                cells[position].appendChild(playerToken);
            });
        }

        function createPlayerInputs(numPlayers) {
            playerNamesContainer.innerHTML = ''; // Clear previous inputs
            playerNames = [];
            for (let i = 0; i < numPlayers; i++) {
                const input = document.createElement('input');
                input.type = 'text';
                input.placeholder = `Player ${i + 1} Name`;
                input.id = `playerName${i}`;
                playerNamesContainer.appendChild(input);
                playerNames.push(`Player ${i + 1}`);
            }
        }

        function startGame() {
            const numPlayers = parseInt(numPlayersInput.value);
            if (numPlayers < 2 || numPlayers > 6) {
                setMessage('Please enter a number of players between 2 and 6.');
                return;
            }

            playerNames = [];
            for (let i = 0; i < numPlayers; i++) {
                const playerNameInput = document.getElementById(`playerName${i}`);
                playerNames.push(playerNameInput.value || `Player ${i + 1}`);
            }

            positions = Array(numPlayers).fill(0);
            protection = Array(numPlayers).fill(false);
            currentPlayer = 0;
            gameActive = true;

            createBoard();
            updateBoard();
            rollDiceButton.disabled = false;
            rollDiceButton.style.display = 'inline-block';
            restartButton.style.display = 'none'; // Hide the restart button
            diceResultElement.textContent = 'Roll the dice to start!';
            turnInfoElement.textContent = `${playerNames[currentPlayer]}'s turn`;
            messageBox.textContent = ''; // Clear messages
            playerNamesContainer.style.display = 'none'; // Hide player name inputs
        }

        numPlayersInput.addEventListener('input', () => {
            const numPlayers = parseInt(numPlayersInput.value);
            createPlayerInputs(numPlayers);
        });

        rollDiceButton.addEventListener('click', () => {
            if (!gameActive) return;
            const diceRoll = rollDice();
            diceResultElement.textContent = `${playerNames[currentPlayer]} rolled a ${diceRoll}`;
            movePlayer(currentPlayer, diceRoll);
            currentPlayer = (currentPlayer + 1) % positions.length;
            turnInfoElement.textContent = `${playerNames[currentPlayer]}'s turn`;
        });

        restartButton.addEventListener('click', () => {
            playerNamesContainer.style.display = 'block'; // Show player name inputs
            startGame();
        });

        startGameButton.addEventListener('click', startGame);

        // Initial call to set up player inputs
        createPlayerInputs(numPlayersInput.value);
        createBoard();
    </script>
</body>
</html>

